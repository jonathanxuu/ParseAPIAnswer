import type { TypedData } from './types';
export declare const ARRAY_REGEX: RegExp;
/**
 * @name getDependencies
 * @description
 * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once
 * in the resulting array.
 */
export declare function getDependencies(typedData: TypedData, type: string, dependencies?: string[]): string[];
/**
 * @name encodeType
 * @description
 * Encode a type to a string. All dependant types are alphabetically sorted.
 */
export declare function encodeType(typedData: TypedData, type: string): string;
/**
 * @name typeHash
 * @description
 * Get a type string as hash.
 */
export declare function typeHash(typedData: TypedData, type: string): Uint8Array;
/**
 * @name encodeData
 * @description
 * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values. All
 * dependant types are automatically encoded.
 */
export declare function encodeData(typedData: TypedData, type: string, data: Record<string, unknown>): Uint8Array;
/**
 * @name structHash
 * @description
 * Get encoded data as a hash. The data should be a key -> value object with all the required values. All dependant
 * types are automatically encoded.
 */
export declare function structHash(typedData: TypedData, type: string, data: Record<string, unknown>): Uint8Array;
/**
 * @name getMessage
 * @description
 * Get the EIP-191 encoded message to sign, from the typedData object. If `hash` is enabled, the message will be hashed
 * with Keccak256.
 */
export declare function getMessage(typedData: TypedData, hash?: boolean): Uint8Array;
