import type { HexString } from './types';
interface Sealed {
    sealed: Uint8Array;
    nonce: Uint8Array;
}
interface Encrypted {
    encrypted: Uint8Array;
    nonce: Uint8Array;
}
/**
 * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.
 */
export declare function naclSeal(message: HexString | Uint8Array, senderBoxSecret: HexString | Uint8Array, receiverBoxPublic: HexString | Uint8Array, nonce?: HexString | Uint8Array): Sealed;
/**
 * Returns a message sealed by the sender, using the receiver's `secret` and `nonce`.
 */
export declare function naclOpen(sealed: HexString | Uint8Array, nonce: HexString | Uint8Array, senderBoxPublic: HexString | Uint8Array, receiverBoxSecret: HexString | Uint8Array): Uint8Array | null;
/**
 * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.
 */
export declare function naclEncrypt(message: HexString | Uint8Array, secret: HexString | Uint8Array, nonce?: HexString | Uint8Array): Encrypted;
/**
 * Returns an decrypted message, using the `secret` and `nonce`.
 */
export declare function naclDecrypt(encrypted: HexString | Uint8Array, nonce: HexString | Uint8Array, secret: HexString | Uint8Array): Uint8Array | null;
export {};
