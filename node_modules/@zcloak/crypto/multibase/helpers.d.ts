import type { HexString } from '../types';
interface Coder {
    decode: (value: string) => Uint8Array;
    encode: (value: Uint8Array) => string;
}
interface Config {
    chars: string;
    coder: Coder;
    prefix: string;
    type: string;
}
type DecodeFn = (value: string) => Uint8Array;
type EncodeFn = (value: Uint8Array | HexString) => string;
type ValidateFn = (value?: unknown) => value is string;
/** @internal */
export declare function createDecode({ coder }: Config, validate: ValidateFn): DecodeFn;
/** @internal */
export declare function createEncode({ coder, prefix }: Config): EncodeFn;
/** @internal */
export declare function createIs(validate: ValidateFn): ValidateFn;
/** @internal */
export declare function createValidate({ chars, prefix, type }: Config): ValidateFn;
export {};
