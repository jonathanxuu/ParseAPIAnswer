"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initWasm = initWasm;
exports.rescuePrimeOptimizedHash = exports.rescuePrimeHash = void 0;
var _wasm = require("@zcloak/wasm");
var asmBundle = _interopRequireWildcard(require("@zcloak/wasm-asm"));
var _wasmBridge = require("@zcloak/wasm-bridge");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

const wasmBridge = new _wasmBridge.WasmBridge();
const rescuePrimeHash = (0, _wasmBridge.withWasm)(wasmBridge, (_ref, values) => {
  let [wasm, retptr] = _ref;
  wasm.ext_rescue_prime_hash(retptr, ...wasmBridge.allocU64a(values));
  return wasmBridge.resultU64a(retptr);
});
exports.rescuePrimeHash = rescuePrimeHash;
const rescuePrimeOptimizedHash = (0, _wasmBridge.withWasm)(wasmBridge, (_ref2, values) => {
  let [wasm, retptr] = _ref2;
  wasm.ext_rescue_prime_optimized_hash(retptr, ...wasmBridge.allocU64a(values));
  return wasmBridge.resultU64a(retptr);
});
exports.rescuePrimeOptimizedHash = rescuePrimeOptimizedHash;
async function initWasm(onlyAsm) {
  if (onlyAsm) {
    wasmBridge.initAsm(asmBundle);
  } else {
    try {
      await wasmBridge.initWasm(_wasm.bytes);
    } catch (error) {
      console.error('Can not to init wasm, try to use asm');
      wasmBridge.initAsm(asmBundle);
    }
  }
}