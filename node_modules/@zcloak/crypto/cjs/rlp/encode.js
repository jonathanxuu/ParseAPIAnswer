"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rlpEncode = rlpEncode;
var _util = require("@polkadot/util");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** Transform an integer into its hexadecimal value */
function numberToHex(integer) {
  if (integer < 0) {
    throw new Error('Invalid integer as argument, must be unsigned!');
  }
  const hex = integer.toString(16);
  return hex.length % 2 ? `0x0${hex}` : `0x${hex}`;
}
function rlpEncode(input) {
  if (Array.isArray(input)) {
    const output = [];
    for (let i = 0; i < input.length; i++) {
      output.push(rlpEncode(input[i]));
    }
    const buf = (0, _util.u8aConcat)(...output);
    return (0, _util.u8aConcat)(encodeLength(buf.length, 192), buf);
  }
  const inputBuf = toBytes(input);
  if (inputBuf.length === 1 && inputBuf[0] < 128) {
    return inputBuf;
  }
  return (0, _util.u8aConcat)(encodeLength(inputBuf.length, 128), inputBuf);
}
function encodeLength(len, offset) {
  if (len < 56) {
    return Uint8Array.from([len + offset]);
  }
  const hexLength = (0, _util.hexStripPrefix)(numberToHex(len));
  const lLength = hexLength.length / 2;
  const firstByte = numberToHex(offset + 55 + lLength);
  return (0, _util.hexToU8a)(firstByte + hexLength);
}

/** Transform anything into a Uint8Array */
function toBytes(v) {
  if (v instanceof Uint8Array) {
    return v;
  }
  if ((0, _util.isBoolean)(v)) {
    v = Number(v);
  }
  if ((0, _util.isNumber)(v)) {
    if (!v) {
      return Uint8Array.from([]);
    }
    return (0, _util.hexToU8a)(numberToHex(Number(v)));
  }
  if ((0, _util.isBigInt)(v)) {
    if (!v) {
      return Uint8Array.from([]);
    }
    return (0, _util.hexToU8a)(numberToHex(v));
  }
  if ((0, _util.isHex)(v)) {
    return (0, _util.hexToU8a)(v);
  }
  if ((0, _util.isString)(v)) {
    return (0, _util.stringToU8a)(v);
  }
  if (v === null || v === undefined) {
    return Uint8Array.from([]);
  }
  throw new Error('toBytes: received unsupported type ' + typeof v);
}