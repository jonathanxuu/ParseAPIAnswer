"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1PrivateKeyTweakAdd = secp256k1PrivateKeyTweakAdd;
var _util = require("@polkadot/util");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

const BN_BE_256_OPTS = {
  bitLength: 256,
  isLe: false
};

// pre-defined curve param as lifted form elliptic
// https://github.com/indutny/elliptic/blob/e71b2d9359c5fe9437fbf46f1f05096de447de57/lib/elliptic/curves.js#L182
const N = 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'.replace(/ /g, '');
const N_BN = new _util.BN(N, 'hex');
function addBn(seckey, tweak) {
  const res = new _util.BN(tweak);
  if (res.cmp(N_BN) >= 0) {
    throw new Error('Tweak parameter is out of range');
  }
  res.iadd(new _util.BN(seckey));
  if (res.cmp(N_BN) >= 0) {
    res.isub(N_BN);
  }
  if (res.isZero()) {
    throw new Error('Invalid resulting private key');
  }
  return (0, _util.bnToU8a)(res, BN_BE_256_OPTS);
}
function secp256k1PrivateKeyTweakAdd(seckey, tweak) {
  if (!(0, _util.isU8a)(seckey) || seckey.length !== 32) {
    throw new Error('Expected seckey to be an Uint8Array with length 32');
  } else if (!(0, _util.isU8a)(tweak) || tweak.length !== 32) {
    throw new Error('Expected tweak to be an Uint8Array with length 32');
  }
  return addBn(seckey, tweak);
}