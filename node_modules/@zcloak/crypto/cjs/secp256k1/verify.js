"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1Verify = secp256k1Verify;
var _util = require("@polkadot/util");
var _ethereum = require("../ethereum");
var _recover = require("./recover");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name secp256k1Verify
 * @description Verifies the signature of `message`, using the supplied pair
 */
function secp256k1Verify(msgHash, signature, publicKeyOrAddress) {
  const sig = (0, _util.u8aToU8a)(signature);
  if (sig.length !== 65) {
    throw new Error(`Expected signature with 65 bytes, ${sig.length} found instead`);
  }
  const publicKey = (0, _recover.secp256k1Recover)(msgHash, sig, sig[64]);
  const signerAddr = (0, _ethereum.ethereumEncode)(publicKey);
  const inputAddr = (0, _ethereum.ethereumEncode)(publicKeyOrAddress);

  // for Ethereum (keccak) the last 20 bytes is the address
  return signerAddr === inputAddr;
}