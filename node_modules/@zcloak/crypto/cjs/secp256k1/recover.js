"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1Recover = secp256k1Recover;
var _secp256k = require("@noble/secp256k1");
var _util = require("@polkadot/util");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

function calculateSigRecovery(recovery, chainId) {
  if (recovery === 0 || recovery === 1) return recovery;
  if (chainId === undefined) {
    return recovery - 27;
  }
  return recovery - (chainId * 2 + 35);
}

/**
 * @name secp256k1Recover
 * @description Recovers a publicKey from the supplied signature
 */
function secp256k1Recover(msgHash, signature, recovery) {
  const sig = (0, _util.u8aToU8a)(signature).subarray(0, 64);
  const msg = (0, _util.u8aToU8a)(msgHash);
  const publicKey = (0, _secp256k.recoverPublicKey)(msg, _secp256k.Signature.fromCompact(sig).toRawBytes(), calculateSigRecovery(recovery));
  if (!publicKey) {
    throw new Error('Unable to recover publicKey from signature');
  }
  return publicKey;
}