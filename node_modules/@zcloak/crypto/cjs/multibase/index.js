"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  decodeMultibase: true
};
exports.decodeMultibase = decodeMultibase;
var _bs = require("./bs32");
Object.keys(_bs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _bs[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bs[key];
    }
  });
});
var _bs2 = require("./bs58");
Object.keys(_bs2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _bs2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bs2[key];
    }
  });
});
var _bs3 = require("./bs64");
Object.keys(_bs3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _bs3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bs3[key];
    }
  });
});
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

function decodeMultibase(multibase) {
  if ((0, _bs2.isBase58)(multibase)) {
    return (0, _bs2.base58Decode)(multibase);
  } else if ((0, _bs.isBase32)(multibase)) {
    return (0, _bs.base32Decode)(multibase);
  } else if ((0, _bs3.isBase64)(multibase)) {
    return (0, _bs3.base64Decode)(multibase);
  } else {
    throw new Error(`Decode ${multibase} error, only support base58, base32, base64`);
  }
}