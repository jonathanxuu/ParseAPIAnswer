"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDecode = createDecode;
exports.createEncode = createEncode;
exports.createIs = createIs;
exports.createValidate = createValidate;
var _util = require("@polkadot/util");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function createDecode(_ref, validate) {
  let {
    coder
  } = _ref;
  return value => {
    validate(value);
    return coder.decode(value.substring(1));
  };
}

/** @internal */
function createEncode(_ref2) {
  let {
    coder,
    prefix
  } = _ref2;
  return value => {
    const out = coder.encode((0, _util.u8aToU8a)(value));
    return `${prefix}${out}`;
  };
}

/** @internal */
function createIs(validate) {
  return value => {
    try {
      return validate(value);
    } catch (error) {
      return false;
    }
  };
}

/** @internal */
function createValidate(_ref3) {
  let {
    chars,
    prefix,
    type
  } = _ref3;
  return value => {
    if (!value || typeof value !== 'string') {
      throw new Error(`Expected non-null, non-empty ${type} string input`);
    }
    if (value[0] !== prefix) {
      throw new Error(`Expected prefix-compatible ${type} to start with '${prefix}'`);
    }
    for (let i = 1; i < value.length; i++) {
      if (!(chars.includes(value[i]) || value[i] === '=' && (i === value.length - 1 || !chars.includes(value[i + 1])))) {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}