"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rescuePrimeAsHex = rescuePrimeAsHex;
exports.rescuePrimeAsU8a = rescuePrimeAsU8a;
var _util = require("@polkadot/util");
var _wasm = require("../wasm");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name rescuePrimeAsU8a
 * @summary Creates a rescue prime u8a from the input.
 * @description
 * From a `Uint8Array` input, create the rescue prime and return the result as a u8a.
 *
 * if `asU64a` set true, the u8a data each items will as `biguint64`,
 * if `asU64a` set false, the u8a will transform to buffer and generate `BigUint64Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { rescuePrimeAsU8a } from '@zcloak/crypto';
 *
 * rescuePrimeAsU8a('abcd1234'); // => [212, 187, 16, 176, 223, 111, 125, 152, 232, 223, 53, 52, 239, 99, 173, 71, 181, 59, 174, 51, 80, 175, 78, 174, 66, 122, 204, 8, 39, 100, 158, 253]
 * ```
 */
function rescuePrimeAsU8a(data) {
  let asU64a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  const u8a = (0, _util.u8aToU8a)(data);
  let u64a;
  if (asU64a) {
    u64a = new BigUint64Array(u8a.length);
    u8a.forEach((value, index) => {
      u64a[index] = BigInt(value);
    });
  } else {
    (0, _util.assert)(u8a.length % 8 === 0, 'byte length of BigUint64Array should be a multiple of 8');
    u64a = new BigUint64Array(u8a.buffer);
  }
  const result = (0, _wasm.rescuePrimeHash)(u64a);
  const resultU8a = new Uint8Array(result.buffer);
  return resultU8a;
}

/**
 * @description Creates a rescue prime hex from the input.
 */
function rescuePrimeAsHex(data, asU64a) {
  return (0, _util.u8aToHex)(rescuePrimeAsU8a(data, asU64a));
}