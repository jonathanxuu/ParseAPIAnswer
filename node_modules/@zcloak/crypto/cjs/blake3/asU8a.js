"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blake3AsHex = blake3AsHex;
exports.blake3AsU8a = blake3AsU8a;
var _blake = require("@noble/hashes/blake3");
var _util = require("@polkadot/util");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name blake3AsU8a
 * @summary Creates a blake3 u8a from the input.
 * @description
 * From a `Uint8Array` input, create the blake3 and return the result as a u8a.
 * @example
 * <BR>
 *
 * ```javascript
 * import { blake3AsU8a } from '@zcloak/crypto';
 *
 * blake3AsU8a('abcd1234'); // => [135,118,41,144,40,252,65,100,204,245,252,44,138,223,209,13,119,200,131,115,120,31,210,44,253,198,228,212,122,61,87,245]
 * ```
 */
function blake3AsU8a(data) {
  let bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
  let key = arguments.length > 2 ? arguments[2] : undefined;
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = (0, _util.u8aToU8a)(data);
  return (0, _blake.blake3)(u8a, {
    dkLen: byteLength,
    key: key || undefined
  });
}

/**
 * @description Creates a blake3 hex from the input.
 */
function blake3AsHex(data) {
  return (0, _util.u8aToHex)(blake3AsU8a(data));
}