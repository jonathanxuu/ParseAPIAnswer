"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naclDecrypt = naclDecrypt;
exports.naclEncrypt = naclEncrypt;
exports.naclOpen = naclOpen;
exports.naclSeal = naclSeal;
var _util = require("@polkadot/util");
var _tweetnacl = _interopRequireDefault(require("tweetnacl"));
var _random = require("./random");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.
 */
function naclSeal(message, senderBoxSecret, receiverBoxPublic) {
  let nonce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (0, _random.randomAsU8a)(24);
  const messageU8a = (0, _util.u8aToU8a)(message);
  const nonceU8a = (0, _util.u8aToU8a)(nonce);
  const senderBoxSecretU8a = (0, _util.u8aToU8a)(senderBoxSecret);
  const receiverBoxPublicU8a = (0, _util.u8aToU8a)(receiverBoxPublic);
  return {
    nonce: nonceU8a,
    sealed: _tweetnacl.default.box(messageU8a, nonceU8a, receiverBoxPublicU8a, senderBoxSecretU8a)
  };
}

/**
 * Returns a message sealed by the sender, using the receiver's `secret` and `nonce`.
 */
function naclOpen(sealed, nonce, senderBoxPublic, receiverBoxSecret) {
  const sealedU8a = (0, _util.u8aToU8a)(sealed);
  const nonceU8a = (0, _util.u8aToU8a)(nonce);
  const senderBoxPublicU8a = (0, _util.u8aToU8a)(senderBoxPublic);
  const receiverBoxSecretU8a = (0, _util.u8aToU8a)(receiverBoxSecret);
  return _tweetnacl.default.box.open(sealedU8a, nonceU8a, senderBoxPublicU8a, receiverBoxSecretU8a) || null;
}

/**
 * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.
 */
function naclEncrypt(message, secret) {
  let nonce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _random.randomAsU8a)(24);
  const messageU8a = (0, _util.u8aToU8a)(message);
  const nonceU8a = (0, _util.u8aToU8a)(nonce);
  const secretU8a = (0, _util.u8aToU8a)(secret);
  return {
    encrypted: _tweetnacl.default.secretbox(messageU8a, nonceU8a, secretU8a),
    nonce: nonceU8a
  };
}

/**
 * Returns an decrypted message, using the `secret` and `nonce`.
 */
function naclDecrypt(encrypted, nonce, secret) {
  const encryptedU8a = (0, _util.u8aToU8a)(encrypted);
  const nonceU8a = (0, _util.u8aToU8a)(nonce);
  const secretU8a = (0, _util.u8aToU8a)(secret);
  return _tweetnacl.default.secretbox.open(encryptedU8a, nonceU8a, secretU8a) || null;
}