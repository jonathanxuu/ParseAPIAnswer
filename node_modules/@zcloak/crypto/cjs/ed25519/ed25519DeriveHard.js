"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519Derive = ed25519Derive;
var _util = require("@polkadot/util");
var _blake = require("../blake2");
// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

const BN_LE_256_OPTS = {
  bitLength: 256,
  isLe: true
};
const HDKD = (0, _util.compactAddLength)((0, _util.stringToU8a)('Ed25519HDKD'));
function ed25519Derive(seed, value) {
  if (!value) return seed;
  const chainCode = new Uint8Array(32);
  const code = /^\d+$/.test(value) ? new _util.BN(value) : value;
  let codeU8a;
  if ((0, _util.isNumber)(code) || (0, _util.isBn)(code) || (0, _util.isBigInt)(code)) {
    codeU8a = (0, _util.bnToU8a)(code, BN_LE_256_OPTS);
  } else if ((0, _util.isHex)(code)) {
    codeU8a = (0, _util.hexToU8a)(code);
  } else if ((0, _util.isString)(code)) {
    codeU8a = (0, _util.compactAddLength)((0, _util.stringToU8a)(code));
  } else {
    throw new Error(`Not parse ${code}`);
  }
  if (codeU8a.length > 32) {
    codeU8a = (0, _blake.blake2AsU8a)(codeU8a);
  }
  chainCode.set(codeU8a);
  return (0, _blake.blake2AsU8a)((0, _util.u8aConcat)(HDKD, seed, chainCode));
}